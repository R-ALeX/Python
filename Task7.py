#1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.

# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.

# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, data):
        self.data = data

    def __str__(self,  fmt="g"):
        return "\n".join([" ".join([str(el) for el in row]) for row in self.data])

    def __add__(self, other):
        try:
            result = [[int(self.data[i][j]) + int(other.data[i][j]) for j in range(len(self.data[i]))] for i in range(len(self.data))]
            return result
        except:
            print("Error!")

m1 = [[2,45,7], [12,4,6], [65,3,23]]
m2 = [[125,12,235], [5,23,324], [11,3,62]]

matr1 = Matrix(m1)
matr2 = Matrix(m2)
new_matr = Matrix(matr1 + matr2)
print(matr1)
print('--------------------------------')
print(matr2)
print('--------------------------------')
print(new_matr)

print('--------------------------------------')


#2. Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.

# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3).
# Проверить работу этих методов на реальных данных.

# Реализовать общий подсчет расхода ткани.
# Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.

from abc import ABC, abstractmethod

class Clothes(ABC):
    result = 0

    def __init__(self):
        pass

    @property
    @abstractmethod
    def calculate(self):
        pass

    def __add__(self, other):
        return  self.calculate + other.calculate

class Coat(Clothes):
    def __init__(self, size):
        super().__init__()
        self.size = size

    @property
    def size(self):
        return self.__size

    @size.setter
    def size(self, size):
        self.__size = size

    @property
    def calculate(self):
        return self.__size / 6.5 + 0.5

class Suit(Clothes):
    def __init__(self, height):
        super().__init__()
        self.height = height

    @property
    def height(self):
        return self.__height

    @height.setter
    def height(self, height):
        self.__height = height

    @property
    def calculate(self):
        return 2 * (self.__height / 100) + 0.3


ct1 = Coat(int(input("Insert size: ")))
print("You need to", ct1.calculate,"metrs for coat of", ct1.size)
st1 = Suit(int(input("Insert size: ")))
print("You need to", st1.calculate,"metrs for suit of", st1.height)

print('--------------------------------------')


#3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

#В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
#Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Human_Cell:
    def __init__(self, count):
        self.count = count

    def make_order(self, el_row):
        self.string = ""
        for i in range(self.count // el_row):
            self.string = self.string + "*" * el_row
            self.string = self.string + "\n"
        self.string = self.string + "*" * (self.count % el_row)
        print(self.string)

    def __str__(self):
        return self.count

    def __add__(self, other):
        return Human_Cell(self.count + other.count)

    def __sub__(self, other):
        return Human_Cell(self.count - other.count)

    def __mul__(self, other):
        return Human_Cell(self.count * other.count)

    def __floordiv__(self, other):
        return Human_Cell(self.count // other.count)

cl1 = Human_Cell(13)
cl1.make_order(6)
print('--------------------------------------')
cl2 = Human_Cell(17)
cl2.make_order(8)
